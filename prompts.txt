//server.js
import express from 'express';
import mongoose from 'mongoose';
import bodyParser from 'body-parser';
import cors from 'cors';
import formRouter from './formRoute.js'
const app = express();
const port = 5000;
app.use(bodyParser.json());
app.use(cors());
app.use('/api/form',formRouter)
mongoose.connect('mongodb+srv://riteshraj10241089:0Bh00uZi2XPTuPpB@cluster0.rf2gy3r.mongodb.net/form-data').then(
    ()=>{
        console.log('connected to backend')
        app.listen(port, () => {
            console.log(`Server running at http://localhost:${port}`);
          });
    }
).catch(
   (err)=>{
    console.log('error occured')
   } 
)
//formModel
import mongoose from 'mongoose';

const formSchema = new mongoose.Schema({
    name: String,
    email: String,
  });
  const Form = mongoose.model('Form', formSchema);
export default Form
// formRoute.js
import { Router } from 'express';
import Form from './formModel.js';
const router = Router();
router.post('/submit', async (req, res) => {
    const newForm = new Form(req.body);
    try {
        const savedForm = await newForm.save()
        res.status(200).json(savedForm)

    }
    catch (err) {
        res.status(500).json('Error Occured')
    }
});
router.get('/', async (req, res) => {
    try {
        const forms = await Form.find();
        res.status(200).json(forms);
    } catch (err) {
        res.status(500).json('Error Occured');
    }
});
// New route to delete a form
router.delete('/delete/:id', async (req, res) => {
    try {
        const deletedForm = await Form.findByIdAndDelete(req.params.id);
        if (!deletedForm) {
            res.status(404).json('Form not found');
        } else {
            res.status(200).json('Form deleted successfully');
        }
    } catch (err) {
        res.status(500).json('Error Occured');
    }
});

export default router;


//App.jsx
import React, { useState, useEffect } from 'react';
import axios from 'axios';
// MUI
import Card from '@mui/material/Card';
import CardActions from '@mui/material/CardActions';
import CardContent from '@mui/material/CardContent';
import CardMedia from '@mui/material/CardMedia';
import Button from '@mui/material/Button';
import Typography from '@mui/material/Typography';
import Box from '@mui/material/Box';
import { createTheme, ThemeProvider, TextField } from '@mui/material';
const theme = createTheme({
  components: {
    MuiOutlinedInput: {
      styleOverrides: {
        root: {
          '& .MuiOutlinedInput-notchedOutline': {
            border: '1px solid white'

          },
          '&:hover .MuiOutlinedInput-notchedOutline': {
            border: '1px solid white'
          },
          '&.Mui-focused .MuiOutlinedInput-notchedOutline': {
            border: '1px solid white'

          },
        },
      },
    },
  },
});

const App = () => {

  const [forms, setForms] = useState([]);
  const [form, setForm] = useState({ name: '', email: '' });
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  useEffect(() => {
    fetchForms();
  }, []);

  const fetchForms = async () => {
    setLoading(true);
    try {
      const response = await axios.get('http://localhost:5000/api/form');
      setForms(response.data);
      setLoading(false);
    } catch (error) {
      setError('Error fetching data');
      setLoading(false);
    }
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    setForm({
      ...form,
      [name]: value,
    });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      const response = await axios.post('http://localhost:5000/api/form/submit', form);
      setForms([...forms, response.data]);
      setForm({ name: '', email: '' });
    } catch (error) {
      setError('Error submitting form');
    }
  };

  return (
    <ThemeProvider theme={theme}>
      <Box pb={'10px'}>
        <Box textAlign={'center'} m={'10px'} >
        <h2>Submit New Form</h2>
        </Box>
        <Box sx={{display:'flex',gap:'10px',justifyContent:'center'}} component={'form'} onSubmit={handleSubmit}>
          <TextField
            sx={{
              input: {
                color: 'white',
                '&::placeholder': {
                  color: 'white',
                  opacity: 1, // Ensure the placeholder is fully opaque
                },
              }
            }}
            type="text"
            variant="outlined"
            name="name"
            value={form.name}
            onChange={handleChange}
            placeholder="Name"
          />
          <TextField
             sx={{
              input: {
                color: 'white',
                '&::placeholder': {
                  color: 'white',
                  opacity: 1, // Ensure the placeholder is fully opaque
                },
              }
            }}
            variant="outlined"
            type="email"
            name="email"
            value={form.email}
            onChange={handleChange}
            placeholder="Email"
          />
          <Button type="submit" variant="contained"> Submit</Button>
        </Box>
        {/*  */}
        {loading ? (
          <p>Loading...</p>
        ) : error ? (
          <p>{error}</p>
        ) : (
          <Box sx={{ mt: '10px', display: 'flex', flexWrap: 'wrap', gap: '20px', width: '100%', justifyContent: 'center', mx: 'auto' }} >
            {/* boxShadow: '10px 10px 44px 24px rgba(25,118,210,0.75)' */}

            {forms.map((form) => (
              <Card sx={{ boxShadow: '10px 10px 44px 24px rgba(25,118,210,0.05)', bgcolor: '#1E1E1E', color: 'white', width: '25%' }}>

                <CardContent>
                  <Typography gutterBottom variant="h5" component="div">
                    {form.name}
                  </Typography>
                  <Typography variant="body2" color="white">
                    {form.email}
                  </Typography>
                </CardContent>
                <CardActions>
                  <Button color='error' size="small">Delete</Button>
                </CardActions>
              </Card>

            ))}
          </Box>
        )}


      </Box>
    </ThemeProvider>
  );
};

export default App;

add the delete request when i click on delete in the app.jsx